#!/usr/bin/env python3
# aiogram v2 bot ‚Äî –ó–∞–∫–∞–∑—ã -> –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω—É(–∞–º)
# –í–ù–ò–ú–ê–ù–ò–ï: –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏ ADMIN_IDS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.

import logging
import sys
import asyncio
from typing import List

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked, ChatNotFound
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# ----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –°–í–û–ò –ó–ù–ê–ß–ï–ù–ò–Ø
# ----------------------------
TOKEN = "8095234010:AAEWFdldpwEwquMhwD4AFA-QP8x_03gDgLo"        # <-- –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω (—Å—Ç—Ä–æ–∫–∞)
# ADMIN_IDS ‚Äî —Å–ø–∏—Å–æ–∫ —á–∏—Å–ª–æ–≤—ã—Ö id –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏
# –ü—Ä–∏–º–µ—Ä: ADMIN_IDS = [123456789, 987654321]
ADMIN_IDS: List[int] = [8243943192]  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à(–∏) —á–∏—Å–ª–æ–≤–æ–π(–µ) ID

# –ü—Ä–æ–≤–µ—Ä–∫–∏
if TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨" or not TOKEN:
    raise SystemExit("–û—à–∏–±–∫–∞: –≤—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.")
if not isinstance(ADMIN_IDS, list) or not all(isinstance(i, int) for i in ADMIN_IDS):
    raise SystemExit("–û—à–∏–±–∫–∞: ADMIN_IDS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —á–∏—Å–ª–æ–≤—ã—Ö id, –Ω–∞–ø—Ä–∏–º–µ—Ä [123456789].")

# ----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ----------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# ----------------------------
# –ö–Ω–æ–ø–∫–∏/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ----------------------------
BTN_PRICES = "üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã"
BTN_PORTFOLIO = "üåê –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
BTN_CONTACTS = "üìû –°–≤—è–∑–∞—Ç—å—Å—è"
BTN_CASES = "üíº –ö–µ–π—Å—ã"
BTN_ORDER = "üìù –ó–∞–∫–∞–∑–∞—Ç—å"
BTN_HELP = "‚ùì –ü–æ–º–æ—â—å"

def make_main_keyboard() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(types.KeyboardButton(BTN_PRICES), types.KeyboardButton(BTN_PORTFOLIO))
    kb.add(types.KeyboardButton(BTN_CONTACTS), types.KeyboardButton(BTN_CASES))
    kb.add(types.KeyboardButton(BTN_ORDER), types.KeyboardButton(BTN_HELP))
    return kb

# ----------------------------
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ----------------------------
class Order(StatesGroup):
    waiting_for_description = State()

# ----------------------------
# –¢–µ–∫—Å—Ç—ã
# ----------------------------
START_TEXT = "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º üëã\n–Ø ‚Äî WebStudioIng Bot. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ."
PRICES_TEXT = (
    "üí∞ –ü—Ä–∞–π—Å‚Äë–æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã:\n\n"
    "‚Ä¢ üíª –õ–µ–Ω–¥–∏–Ω–≥ ‚Äî –æ—Ç 10 000 ‚ÇΩ\n"
    "‚Ä¢ ü§ñ Telegram‚Äë–±–æ—Ç ‚Äî –æ—Ç 8 000 ‚ÇΩ\n"
    "‚Ä¢ üé® –õ–æ–≥–æ—Ç–∏–ø ‚Äî –æ—Ç 5 000 ‚ÇΩ\n\n"
    "–î–ª—è —Ç–æ—á–Ω–æ–π —Å–º–µ—Ç—ã –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç."
)
PORTFOLIO_URL = "https://datffacentr069rt3.github.io/portfolio-my/"
ORDER_PROMPT = "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –ø—Ä–æ–µ–∫—Ç (—á—Ç–æ –Ω—É–∂–Ω–æ, —Å—Ä–æ–∫–∏, –±—é–¥–∂–µ—Ç). –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã/—Å–∫—Ä–∏–Ω—ã."

# ----------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# ----------------------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply(START_TEXT, reply_markup=make_main_keyboard())

@dp.message_handler(lambda m: m.text and m.text.strip() == BTN_PRICES)
async def handle_prices(message: types.Message):
    await message.answer(PRICES_TEXT)

@dp.message_handler(lambda m: m.text and m.text.strip() == BTN_PORTFOLIO)
async def handle_portfolio(message: types.Message):
    await message.answer(f"–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {PORTFOLIO_URL}")

@dp.message_handler(lambda m: m.text and m.text.strip() == BTN_CONTACTS)
async def handle_contacts(message: types.Message):
    await message.answer("üì© Telegram: @—Ç–≤–æ–π_–Ω–∏–∫_–≤_TG\nüìß webstudioing@mail.com")

@dp.message_handler(lambda m: m.text and m.text.strip() == BTN_CASES)
async def handle_cases(message: types.Message):
    await message.answer("–ö–µ–π—Å—ã: –ª–µ–Ω–¥–∏–Ω–≥ ‚Äî +30% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –±–æ—Ç‚Äë–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤.")

@dp.message_handler(lambda m: m.text and m.text.strip() == BTN_HELP)
async def handle_help(message: types.Message):
    await message.answer("/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(lambda m: m.text and m.text.strip() == BTN_ORDER)
async def cmd_order(message: types.Message):
    await message.answer(ORDER_PROMPT, reply_markup=types.ReplyKeyboardRemove())
    await Order.waiting_for_description.set()

# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(state=Order.waiting_for_description, content_types=types.ContentTypes.TEXT)
async def process_order_description_text(message: types.Message, state: FSMContext):
    description = message.text.strip()
    await _send_order_to_admins(message.from_user, description_text=description, message_obj=message)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=make_main_keyboard())
    await state.finish()

# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª—ã/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
@dp.message_handler(state=Order.waiting_for_description, content_types=types.ContentTypes.ANY)
async def process_order_description_any(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
    try:
        if message.photo:
            # –±–µ—Ä–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            photo = message.photo[-1]
            caption = message.caption or ""
            await _forward_media_to_admins(message, media_type="photo", file_id=photo.file_id, caption=caption)
            # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å/–æ–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            if caption:
                await _send_order_to_admins(message.from_user, description_text=caption, message_obj=message)
            await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=make_main_keyboard())
            await state.finish()
            return

        if message.document:
            doc = message.document
            caption = message.caption or ""
            await _forward_media_to_admins(message, media_type="document", file_id=doc.file_id, caption=caption, filename=doc.file_name)
            if caption:
                await _send_order_to_admins(message.from_user, description_text=caption, message_obj=message)
            await message.answer("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=make_main_keyboard())
            await state.finish()
            return

        if message.video:
            video = message.video
            caption = message.caption or ""
            await _forward_media_to_admins(message, media_type="video", file_id=video.file_id, caption=caption)
            if caption:
                await _send_order_to_admins(message.from_user, description_text=caption, message_obj=message)
            await message.answer("–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=make_main_keyboard())
            await state.finish()
            return

        # –ï—Å–ª–∏ –¥—Ä—É–≥–æ–µ ‚Äî –ø–æ–ø—Ä–æ—à–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª/—Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–ª–æ–∂–µ–Ω–∏—è: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.")
        await state.finish()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∞–¥–º–∏–Ω—É(–∞–º)
async def _send_order_to_admins(user: types.User, description_text: str, message_obj: types.Message = None):
    username = f"@{user.username}" if user.username else "‚Äî"
    name = " ".join(filter(None, [user.first_name, user.last_name])).strip() or "‚Äî"
    user_id = user.id

    admin_message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {name}\n"
        f"Username: {username}\n"
        f"User ID: {user_id}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{description_text}"
    )

    for admin in ADMIN_IDS:
        try:
            await bot.send_message(admin, admin_message)
        except BotBlocked:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É %s ‚Äî –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", admin)
        except ChatNotFound:
            logging.warning("–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∞–¥–º–∏–Ω –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞).", admin)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É %s: %s", admin, e)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞ (–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º send_... —Å file_id —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–ª–∞—Ç—å)
async def _forward_media_to_admins(message: types.Message, media_type: str, file_id: str, caption: str = "", filename: str = None):
    """
    media_type: 'photo' | 'document' | 'video'
    """
    for admin in ADMIN_IDS:
        try:
            if media_type == "photo":
                await bot.send_photo(admin, photo=file_id, caption=f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.id}\n{caption}")
            elif media_type == "document":
                await bot.send_document(admin, document=file_id, caption=f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.id}\n{caption}")
            elif media_type == "video":
                await bot.send_video(admin, video=file_id, caption=f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.id}\n{caption}")
        except BotBlocked:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω—É %s ‚Äî –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", admin)
        except ChatNotFound:
            logging.warning("–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞.", admin)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω—É %s: %s", admin, e)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback
@dp.message_handler()
async def fallback(message: types.Message):
    text = (message.text or "").strip()
    logging.info("–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (id=%s): %r", getattr(message.from_user, "username", None), message.from_user.id, text)
    await message.reply("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=make_main_keyboard())

# ----------------------------
# Event loop fix for Windows + new Python builds
# ----------------------------
def setup_event_loop_for_windows():
    try:
        if sys.platform.startswith("win"):
            try:
                asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
            except Exception:
                pass
        try:
            asyncio.get_running_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —è–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å event loop: %s", e)

# ----------------------------
# –ó–∞–ø—É—Å–∫
# ----------------------------
if __name__ == "__main__":
    setup_event_loop_for_windows()
    executor.start_polling(dp, skip_updates=True)